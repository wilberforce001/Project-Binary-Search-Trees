Sorted Array to Balanced BST By Finding The middle element

The idea is to find the middle element of the array and make it the root of the tree, then perform the same operation on the left subarray for the root’s left child and the same operation on the right subarray for the root’s right child.

Followed the following steps to implement the above in Javascript
Set The middle element of the array as root.
Recursively did the same for the left half and right half.
    Get the middle of the left half and make it the left child of the root created in step 1.
    Get the middle of the right half and make it the right child of the root created in step 1.
Print the preorder of the tree.



The result of the code above is 
 "Preorder traversal of constructed BST: 4 2 1 3 6 5 7" which
indicates the pre-order traversal of the constructed Binary Search
Tree (BST).

In a pre-order traversal, you visit the root node first, 
then recursively traverse the left subtree, and finally recursively 
traverse the right subtree. So, when you see the sequence "4 2 1 3 6 5 7", it means:

Start at the root node, which contains the value 4.
Traverse to the left subtree of 4, which contains the nodes with 
values 2, 1, and 3.
After finishing the left subtree, move to the right subtree of 4,
which contains the nodes with values 6, 5, and 7.
So, the pre-order traversal of the constructed BST yields the 
sequence: 4 (root), 2 (left child of 4), 1 (left child of 2), 
3 (right child of 2), 6 (right child of 4), 5 (left child of 6), 
and 7 (right child of 6). 


Approach 2: Using queue – Iterative Approach in BSTapproach2.js 

1. First initialize a queue with root node and loop until the queue is empty.
2. Remove first node from the queue and find mid element of the sorted array.
3. Create new node with previously find middle node and set left child to the deque node left child if present and also set the right child with deque node right child. Enqueue the new node onto the queue. Set the right child of the dequeued node to the middle element on the left side of the sorted array. If the dequeued node has a left child, enqueue it onto the queue. Return the root node.

